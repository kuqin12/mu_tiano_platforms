## @file
# Azure Pipeline build file for building platforms with GCC.
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: extra_install_step
  displayName: Extra Install Steps
  type: stepList
  default:
    - script: echo No extra steps provided
- name: tool_chain_tag
  displayName: Tool Chain (e.g. VS2022)
  type: string
  default: ''
- name: vm_image
  displayName: Virtual Machine Image (e.g. windows-latest)
  type: string
  default: 'windows-latest'
- name: pool_name
  displayName: Pool Name
  type: string
  default: ""
- name: container_image
  displayName: Container Image
  type: string
  default: ''
- name: run_timeout
  displayName: Run Timeout (in minutes)
  type: number
  default: 25
- name: build_matrix
  type: object
  default:
    QemuQ35_DEBUG:
      BuildPackage: QemuQ35Pkg
      BuildFile: "Platforms/QemuQ35Pkg/PlatformBuild.py"
      BuildArch: IA32,X64
      BuildFlags: ""
      BuildTarget: "DEBUG"
      BuildExtraTag: ""
      Run: true
      RunFlags: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"
      SelfHostAgent: false
      BuildArtifactsBinary: |
        **/QEMUQ35_*.fd

    QemuQ35_RELEASE:
      BuildPackage: QemuQ35Pkg
      BuildFile: "Platforms/QemuQ35Pkg/PlatformBuild.py"
      BuildArch: IA32,X64
      BuildFlags: ""
      BuildTarget: "RELEASE"
      BuildExtraTag: ""
      Run: true
      RunFlags: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"
      SelfHostAgent: false
      BuildArtifactsBinary: |
        **/QEMUQ35_*.fd

    QemuQ35_DEBUG_ARM:
      BuildPackage: QemuQ35Pkg
      BuildFile: "Platforms/QemuQ35Pkg/PlatformBuild.py"
      BuildArch: IA32,X64
      BuildFlags: ""
      BuildTarget: "DEBUG"
      BuildExtraTag: "ON_ARM"
      Run: false
      RunFlags: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"
      SelfHostAgent: true
      BuildArtifactsBinary: |
        **/QEMUQ35_*.fd
        **/*/*TestApp.efi

    QemuQ35_RELEASE_ARM:
      BuildPackage: QemuQ35Pkg
      BuildFile: "Platforms/QemuQ35Pkg/PlatformBuild.py"
      BuildArch: IA32,X64
      BuildFlags: ""
      BuildTarget: "RELEASE"
      BuildExtraTag: "ON_ARM"
      Run: false
      RunFlags: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"
      SelfHostAgent: true
      BuildArtifactsBinary: |
        **/QEMUQ35_*.fd
        **/*/*TestApp.efi

    QemuQ35_NO_SMM_RELEASE:
      BuildPackage: QemuQ35Pkg
      BuildFile: "Platforms/QemuQ35Pkg/PlatformBuild.py"
      BuildArch: IA32,X64
      BuildFlags: "BLD_*_SMM_ENABLED=FALSE"
      BuildTarget: "RELEASE"
      BuildExtraTag: "NO_SMM"
      Run: true
      RunFlags: SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE BLD_*_QEMU_CORE_NUM=2 BLD_*_SMM_ENABLED=FALSE
      BuildArtifactsBinary: |
        **/QEMUQ35_*.fd

    QemuSbsa_DEBUG:
      BuildPackage: QemuSbsaPkg
      BuildFile: "Platforms/QemuSbsaPkg/PlatformBuild.py"
      BuildArch: AARCH64
      BuildFlags: ""
      BuildTarget: "DEBUG"
      BuildExtraTag: ""
      Run: true
      RunFlags: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"
      SelfHostAgent: false
      BuildArtifactsBinary: |
        **/QEMU_EFI.fd
        **/SECURE_FLASH0.fd

    QemuSbsa_RELEASE:
      BuildPackage: QemuSbsaPkg
      BuildFile: "Platforms/QemuSbsaPkg/PlatformBuild.py"
      BuildArch: AARCH64
      BuildFlags: ""
      BuildTarget: "RELEASE"
      BuildExtraTag: ""
      Run: true
      RunFlags: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"
      SelfHostAgent: false
      BuildArtifactsBinary: |
        **/QEMU_EFI.fd
        **/SECURE_FLASH0.fd

jobs:
  - ${{ each item in parameters.build_matrix }}:
    - job: PlatformBuild_${{ item.Key }}
      displayName: Build Platforms ${{ item.Key }}
      condition: and(not(Canceled()), or(eq(variables['tool_chain_tag'], 'GCC5'), not(startsWith('${{ item.Key }}', 'QemuSbsa'))))

      workspace:
        clean: all

      variables:
      - name: Run
        value: ${{ item.Value.Run }}

      ${{ if and(ne(parameters.container_image, ''), not( item.Value.SelfHostAgent )) }}:
        container: ${{ parameters.container_image }}

      ${{ if eq(item.Value.SelfHostAgent, true) }}:
        pool:
          name: ${{ parameters.pool_name }}
      ${{ else }}:
        pool:
          vmImage: ${{ parameters.vm_image }}

      steps:
      - ${{ if and(ne(parameters.container_image, ''), not(contains(parameters.vm_image, 'windows'))) }}:
        - script: echo "##vso[task.prependpath]/home/vsts_azpcontainer/.local/bin"
          displayName: Add User Local Bin to Path
        - script: sudo dnf install -y mtools dosfstools
          displayName: Install mtools and dosfstools
      - template: Steps/BuildPlatform.yml@mu_devops
        parameters:
          tool_chain_tag: $(tool_chain_tag)
          build_pkg: ${{ item.Value.BuildPackage }}
          build_target: ${{ item.Value.BuildTarget }}
          build_arch: ${{ item.Value.BuildArch }}
          build_file: ${{ item.Value.BuildFile }}
          build_flags: ${{ item.Value.BuildFlags }}
          run_flags: ${{ item.Value.RunFlags }}
          run_timeout: ${{ parameters.run_timeout }}
          extra_install_step: ${{ parameters.extra_install_step }}
          install_tools: ${{ and(not(eq(item.Value.SelfHostAgent, true)), eq(parameters.container_image, '')) }}
          artifacts_identifier: '${{ item.Value.BuildPackage }} $(tool_chain_tag) ${{ item.Value.BuildTarget }} ${{ item.Value.BuildExtraTag }}'
          artifacts_binary: ${{ item.Value.BuildArtifactsBinary }}

    - job: RunQemuBuilds_${{ item.Key }}
      displayName: Run Qemu Builds ${{ item.Key }}
      dependsOn: PlatformBuild_${{ item.Key }}
      condition: |
        and(succeeded(),
            and(ne(variables['tool_chain_tag'], 'GCC5'),
                and(StartsWith('${{ item.Key }}', 'QemuQ35'), EndsWith('${{ item.Key }}', 'ARM'))))

      pool:
        vmImage: ${{ parameters.vm_image }}

      steps:
      - checkout: self
        clean: true
        fetchDepth: 1

      - template: Steps/SetupPythonPreReqs.yml@mu_devops
        parameters:
          install_python: true

      # Set default
      - powershell:
          Write-Host "##vso[task.setvariable variable=pkg_count]${{ 1 }}"

      # Setup repo
      - task: CmdLine@2
        displayName: Setup
        inputs:
          script: git submodule update --init --depth 1
        condition: and(gt(variables.pkg_count, 0), succeeded())

      # Stuart Update
      - task: CmdLine@2
        displayName: Update
        inputs:
          script: stuart_update -c ${{ item.Value.BuildFile }} TOOL_CHAIN_TAG=$(tool_chain_tag) -t ${{ item.Value.BuildTarget }} -a ${{ item.Value.BuildArch }} ${{ item.Value.BuildFlags }}
        condition: and(gt(variables.pkg_count, 0), succeeded())

      # Potential Extra steps
      - ${{ parameters.extra_install_step }}

      - task: DownloadPipelineArtifact@2
        name: DownloadVisualStudioFds
        displayName: Download Visual Studio FD files
        inputs:
          buildType: 'current'
          artifactName: 'Binaries ${{ item.Value.BuildPackage }} $(tool_chain_tag) ${{ item.Value.BuildTarget }}'
          itemPattern: '**/*.fd'
          targetPath: 'Build/${{ item.Value.BuildPackage }}/${{ item.Value.BuildTarget }}_$(tool_chain_tag)/FV/'

      - task: DownloadPipelineArtifact@2
        name: DownloadVisualStudioTests
        displayName: Download Visual Studio Test Files
        inputs:
          buildType: 'current'
          artifactName: 'Binaries ${{ item.Value.BuildPackage }} $(tool_chain_tag) ${{ item.Value.BuildTarget }}'
          itemPattern: '**/*.efi'
          targetPath: 'Build/${{ item.Value.BuildPackage }}/${{ item.Value.BuildTarget }}_$(tool_chain_tag)/X64/'

      # Run
      - task: CmdLine@2
        displayName: Run to Shell
        inputs:
          script: stuart_build -c ${{ item.Value.BuildFile }} TOOL_CHAIN_TAG=$(tool_chain_tag) TARGET=${{ item.Value.BuildTarget }} -a ${{ item.Value.BuildArch }} ${{ item.Value.BuildFlags }} ${{ item.Value.RunFlags }} --FlashOnly
        condition: and(gt(variables.pkg_count, 0), succeeded())
        timeoutInMinutes: ${{ parameters.run_timeout }}

      # Copy build logs to the artifact staging directory
      - template: Steps/CommonLogCopyAndPublish.yml@mu_devops
        parameters:
          artifacts_identifier: 'Binaries ${{ item.Value.BuildPackage }} $(tool_chain_tag) ${{ item.Value.BuildTarget }} ${{ item.Value.BuildExtraTag }}'
