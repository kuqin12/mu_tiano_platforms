## @file
# Azure Pipeline build file for building platforms with GCC.
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: extra_install_step
  displayName: Extra Install Steps
  type: stepList
  default:
    - script: echo No extra steps provided
- name: tool_chain_tag
  displayName: Tool Chain (e.g. VS2022)
  type: string
  default: ''
- name: vm_image
  displayName: Virtual Machine Image (e.g. windows-latest)
  type: string
  default: 'windows-latest'
- name: pool_name
  displayName: Pool Name
  type: string
  default: ""
- name: container_image
  displayName: Container Image
  type: string
  default: ''
- name: run_timeout
  displayName: Run Timeout (in minutes)
  type: number
  default: 25
- name: run_flags
  displayName: Run script flag
  type: string
  default: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"

jobs:
  - job: PlatformBuild
    displayName: Build Platforms

    # Use matrix to speed up the build process
    strategy:
      matrix:

        QemuQ35_DEBUG:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "DEBUG"
          Run: true
          Build.AgentPool: ""
          Run.Flags: ${{ parameters.run_flags }}
          Build.ArtifactsBinary: |
            **/QEMUQ35_*.fd

        QemuQ35_RELEASE:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "RELEASE"
          Run: true
          Build.AgentPool: ""
          Run.Flags: ${{ parameters.run_flags }}
          Build.ArtifactsBinary: |
            **/QEMUQ35_*.fd

        QemuQ35_DEBUG_ARM:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "DEBUG"
          Run: false
          Build.AgentPool: ${{ parameters.pool_name }}
          Run.Flags: ${{ parameters.run_flags }}
          Build.ArtifactsBinary: |
            **/QEMUQ35_*.fd
            **/*/*TestApp.efi

        QemuQ35_RELEASE_ARM:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "RELEASE"
          Run: false
          Build.AgentPool: ${{ parameters.pool_name }}
          Run.Flags: ${{ parameters.run_flags }}
          Build.ArtifactsBinary: |
            **/QEMUQ35_*.fd
            **/*/*TestApp.efi

        ${{ if eq(parameters.tool_chain_tag, 'GCC5') }}:
          QemuSbsa_DEBUG:
            Build.Package: QemuSbsaPkg
            Build.File: "Platforms/QemuSbsaPkg/PlatformBuild.py"
            Build.Arch: AARCH64
            Build.Flags: ""
            Build.Target: "DEBUG"
            Run: true
            Build.AgentPool: ""
            Run.Flags: ${{ parameters.run_flags }}
            Build.ArtifactsBinary: |
              **/QEMU_EFI.fd
              **/SECURE_FLASH0.fd

          QemuSbsa_RELEASE:
            Build.Package: QemuSbsaPkg
            Build.File: "Platforms/QemuSbsaPkg/PlatformBuild.py"
            Build.Arch: AARCH64
            Build.Flags: ""
            Build.Target: "RELEASE"
            Run: true
            Build.AgentPool: ""
            Run.Flags: ${{ parameters.run_flags }}
            Build.ArtifactsBinary: |
              **/QEMU_EFI.fd
              **/SECURE_FLASH0.fd

    workspace:
      clean: all

    ${{ if ne(parameters.container_image, '') }}:
      container: ${{ parameters.container_image }}

    pool:
      name: $(Build.AgentPool)
      vmImage: ${{ parameters.vm_image }}

    steps:
    - ${{ if and(ne(parameters.container_image, ''), not(contains(parameters.vm_image, 'windows'))) }}:
      - script: echo "##vso[task.prependpath]/home/vsts_azpcontainer/.local/bin"
        displayName: Add User Local Bin to Path
    - template: Steps/BuildPlatform.yml@mu_devops
      parameters:
        tool_chain_tag: $(tool_chain_tag)
        build_pkg: $(Build.Package)
        build_target: $(Build.Target)
        build_arch: $(Build.Arch)
        build_file: $(Build.File)
        build_flags: $(Build.Flags)
        run_flags: $(Run.Flags)
        run_timeout: ${{ parameters.run_timeout }}
        extra_install_step: ${{ parameters.extra_install_step }}
        ${{ if eq(parameters.container_image, '') }}:
          install_tools: eq(variables['Build.AgentPool'], '')
        ${{ else }}:
          install_tools: 'false'
        artifacts_identifier: '$(Build.Package) $(tool_chain_tag) $(Build.Target)'
        artifacts_binary: $(Build.ArtifactsBinary)

  - job: RunQemuBuilds
    displayName: Run Qemu Builds
    dependsOn: PlatformBuild
    condition: and(succeeded(), ne(variables['tool_chain_tag'], 'GCC5'))
    strategy:
      matrix:
        Run_QemuQ35_DEBUG_ARM:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "DEBUG"
          Build.ArtifactId: 'Binaries $(Build.Package) $(tool_chain_tag) $(Build.Target)'

        Run_QemuQ35_RELEASE_ARM:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "RELEASE"
          Build.ArtifactId: 'Binaries $(Build.Package) $(tool_chain_tag) $(Build.Target)'

    pool:
      vmImage: ${{ parameters.vm_image }}

    steps:
    - checkout: self
      clean: true
      fetchDepth: 1

    - template: Steps/SetupPythonPreReqs.yml@mu_devops
      parameters:
        install_python: true

    # Set default
    - powershell:
        Write-Host "##vso[task.setvariable variable=pkg_count]${{ 1 }}"

    # Setup repo
    - task: CmdLine@2
      displayName: Setup
      inputs:
        script: git submodule update --init --depth 1
      condition: and(gt(variables.pkg_count, 0), succeeded())

    # Stuart Update
    - task: CmdLine@2
      displayName: Update
      inputs:
        script: stuart_update -c $(Build.File) TOOL_CHAIN_TAG=$(tool_chain_tag) -t $(Build.Target) -a $(Build.Arch) $(Build.Flags)
      condition: and(gt(variables.pkg_count, 0), succeeded())

    # Potential Extra steps
    - ${{ parameters.extra_install_step }}

    - task: DownloadPipelineArtifact@2
      name: DownloadVisualStudioFds
      displayName: Download Visual Studio FD files
      inputs:
        buildType: 'current'
        artifactName: $(Build.ArtifactId)
        itemPattern: '**/*.fd'
        targetPath: 'Build/$(Build.Package)/$(Build.Target)_$(tool_chain_tag)/FV/'

    - task: DownloadPipelineArtifact@2
      name: DownloadVisualStudioTests
      displayName: Download Visual Studio Test Files
      inputs:
        buildType: 'current'
        artifactName: $(Build.ArtifactId)
        itemPattern: '**/*.efi'
        targetPath: 'Build/$(Build.Package)/$(Build.Target)_$(tool_chain_tag)/X64/'

    # Run
    - task: CmdLine@2
      displayName: Run to Shell
      inputs:
        script: stuart_build -c $(Build.File) TOOL_CHAIN_TAG=$(tool_chain_tag) TARGET=$(Build.Target) -a $(Build.Arch) $(Build.Flags) ${{ parameters.run_flags }} --FlashOnly
      condition: and(gt(variables.pkg_count, 0), succeeded())
      timeoutInMinutes: ${{ parameters.run_timeout }}

    # Copy build logs to the artifact staging directory
    - template: Steps/CommonLogCopyAndPublish.yml@mu_devops
      parameters:
        artifacts_identifier: 'Binaries $(Build.Package) $(tool_chain_tag) $(Build.Target)'
